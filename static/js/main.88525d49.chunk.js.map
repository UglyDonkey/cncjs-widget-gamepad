{"version":3,"sources":["gamepad/GamepadConnection.ts","common/OneLine.tsx","gamepad/GamepadStatus.tsx","gamepad/GamepadSelection.tsx","App.tsx","reportWebVitals.ts","gamepad/listeners.ts","index.tsx"],"names":["gamepadConnection","selected","undefined","available","makeAutoObservable","this","gamepad","i","findIndex","a","index","push","splice","filter","length","OneLine","styled","div","GamepadStatus","observer","name","GamepadSelection","map","GamepadOption","as","onClick","select","AppDiv","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","window","addEventListener","e","id","connected","disconnected","setupListeners","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAwCeA,EAFW,IAnC1B,WAII,aAAe,yBAHfC,cAAqBC,EAGP,KAFdC,UAAuB,GAGnBC,YAAmBC,MAL3B,6CAQI,SAAUC,GACN,IAAMC,EAAIF,KAAKF,UAAUK,WAAU,SAAAC,GAAC,OAAIA,EAAEC,QAAUJ,EAAQI,UAClD,IAAPH,EACCF,KAAKF,UAAUQ,KAAKL,GAEpBD,KAAKF,UAAUI,GAAKD,IAbhC,0BAiBI,SAAaA,GACT,IAAMC,EAAIF,KAAKF,UAAUK,WAAU,SAAAC,GAAC,OAAIA,EAAEC,QAAUJ,EAAQI,UAClD,IAAPH,GACCF,KAAKF,UAAUS,OAAOL,EAAG,GAE1BF,KAAKJ,WAAaK,IACjBD,KAAKJ,cAAWC,KAvB5B,oBA2BI,SAAOI,GACiE,IAAjED,KAAKF,UAAUU,QAAO,SAAAJ,GAAC,OAAIA,EAAEC,QAAUJ,EAAQI,SAAOI,SAGzDT,KAAKJ,SAAWK,OA/BxB,M,OCDaS,EAAUC,IAAOC,IAAV,6H,OCEPC,EAAgBC,aAAU,kBACnC,cAACJ,EAAD,UACKf,EAAkBC,SAAlB,iBAEaD,EAAkBC,SAASmB,MAErC,gCCLCC,EAAmBF,aAAS,kBACrC,8BACKnB,EAAkBG,UAAUmB,KAAI,SAAAhB,GAAO,OAAI,cAAC,EAAD,CAAmCA,QAASA,GAAxBA,EAAQI,eAI1Ea,EAAgB,SAAC,GAAmC,IAAlCjB,EAAiC,EAAjCA,QACbc,EAAQd,EAARc,KAEP,OAAO,cAACL,EAAD,CAASS,GAAG,SAASC,QAAS,kBAAMzB,EAAkB0B,OAAOpB,IAA7D,SAAwEc,KCF7EO,EAASX,IAAOC,IAAV,gDAIGW,EAXH,kBACR,eAACD,EAAD,WACI,cAACT,EAAD,IACA,cAACG,EAAD,QCMOQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCPS,WACnBQ,OAAOC,iBAAiB,oBAAoB,SAAAC,GAAM,IAAD,EACxBA,EAAmBlC,QAAjCI,EADsC,EACtCA,MAAO+B,EAD+B,EAC/BA,GACdzC,EAAkB0C,UAAU,CAAChC,QAAOU,KAAMqB,OAG9CH,OAAOC,iBAAiB,uBAAuB,SAAAC,GAAM,IAAD,EAC3BA,EAAmBlC,QAAjCI,EADyC,EACzCA,MAAO+B,EADkC,EAClCA,GACdzC,EAAkB2C,aAAa,CAACjC,QAAOU,KAAMqB,QCHrDG,GAEAC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.88525d49.chunk.js","sourcesContent":["import {makeAutoObservable} from \"mobx\";\nimport {Gamepad} from \"./Gamepad\";\n\nexport class GamepadConnection {\n    selected?: Gamepad = undefined;\n    available: Gamepad[] = [];\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    connected(gamepad: Gamepad) {\n        const i = this.available.findIndex(a => a.index === gamepad.index);\n        if(i === -1) {\n            this.available.push(gamepad);\n        } else {\n            this.available[i] = gamepad;\n        }\n    }\n\n    disconnected(gamepad: Gamepad) {\n        const i = this.available.findIndex(a => a.index === gamepad.index);\n        if(i !== -1) {\n            this.available.splice(i, 1);\n        }\n        if(this.selected === gamepad) {\n            this.selected = undefined;\n        }\n    }\n\n    select(gamepad: Gamepad) {\n        if(this.available.filter(a => a.index === gamepad.index).length === 0) {\n            return;\n        }\n        this.selected = gamepad;\n    }\n}\n\nconst gamepadConnection = new GamepadConnection();\n\nexport default gamepadConnection;\n","import styled from \"styled-components\";\n\nexport const OneLine = styled.div`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    width: 100%;\n`;\n","import {observer} from \"mobx-react-lite\";\nimport gamepadConnection from \"./GamepadConnection\";\nimport {OneLine} from \"../common/OneLine\";\n\nexport const GamepadStatus = observer (() => (\n    <OneLine>\n        {gamepadConnection.selected\n            ?\n            `using: ${gamepadConnection.selected.name}`\n            :\n            'please select controller'\n        }\n    </OneLine>\n));\n","import {observer} from \"mobx-react-lite\";\nimport gamepadConnection from \"./GamepadConnection\";\nimport {Gamepad} from \"./Gamepad\";\nimport {OneLine} from \"../common/OneLine\";\n\nexport const GamepadSelection = observer(() => (\n    <div>\n        {gamepadConnection.available.map(gamepad => <GamepadOption key={gamepad.index} gamepad={gamepad}/>)}\n    </div>\n));\n\nconst GamepadOption = ({gamepad}: {gamepad: Gamepad}) => {\n    const {name} = gamepad;\n\n    return <OneLine as='button' onClick={() => gamepadConnection.select(gamepad)}>{name}</OneLine>\n};\n","import React from 'react';\nimport {GamepadStatus} from \"./gamepad/GamepadStatus\";\nimport {GamepadSelection} from \"./gamepad/GamepadSelection\";\nimport styled from \"styled-components\";\n\nconst App = () => (\n    <AppDiv>\n        <GamepadStatus/>\n        <GamepadSelection/>\n    </AppDiv>\n);\n\nconst AppDiv = styled.div`\n    padding: 10px;\n`\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import gamepadConnection from \"./GamepadConnection\";\n\nconst setupListeners = () => {\n    window.addEventListener(\"gamepadconnected\", e => {\n        const {index, id} = (e as GamepadEvent).gamepad;\n        gamepadConnection.connected({index, name: id});\n    });\n\n    window.addEventListener(\"gamepaddisconnected\", e => {\n        const {index, id} = (e as GamepadEvent).gamepad;\n        gamepadConnection.disconnected({index, name: id});\n    });\n}\n\nexport default setupListeners;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport setupListeners from \"./gamepad/listeners\";\n\nsetupListeners();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}