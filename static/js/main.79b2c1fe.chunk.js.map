{"version":3,"sources":["connection/socket.js","resizer/ResizeObserver.js","connection/connection.ts","gamepad/GamepadConnection.ts","common/OneLine.tsx","gamepad/GamepadStatus.tsx","gamepad/GamepadSelection.tsx","connection/connectionStatus.ts","connection/components/Connection.tsx","gamepad/GamepadSettings.tsx","params/params.ts","gamepad/fetchControls.ts","controllerMode/jogger/joggerExecutor.ts","controllerMode/jogger/index.ts","controllerMode/jogger/jogger.ts","controllerMode/jogger/JogSwitch.tsx","controllerMode/jogger/JoggerSettings.tsx","controllerMode/knob/knob.ts","gamepad/fetchAngles.ts","controllerMode/knob/knobExecutor.ts","controllerMode/knob/index.ts","controllerMode/knob/KnobSwitch.tsx","controllerMode/knob/KnobSettings.tsx","common/HorizontalLayout.tsx","controllerMode/ControllerModeSelect.tsx","controllerMode/knob/KnobView.tsx","controllerMode/jogger/JoggerView.tsx","App.tsx","reportWebVitals.ts","gamepad/listeners.ts","resizer/setup.ts","index.tsx"],"names":["io","require","module","exports","options","callback","host","token","url","socket","connect","on","console","log","err","error","destroy","Error","port","data","ResizeObserver","observer","this","target","disconnect","MutationObserver","mutations","observe","attributes","attributeOldValue","characterData","characterDataOldValue","childList","subtree","connection","gamepadConnection","selected","undefined","available","deadzone","makeAutoObservable","gamepad","i","findIndex","a","index","push","splice","filter","length","OneLine","styled","div","GamepadStatus","name","GamepadSelection","map","GamepadOption","as","onClick","select","connectionStatus","Connection","GamepadSettings","type","value","onChange","e","setDeadzone","Number","parseFloat","urlParams","URLSearchParams","window","location","search","params","get","setupSocket","setupListeners","setupPort","gcode","emit","off","setPort","ports","find","inuse","openPort","closePort","setupConnection","promisify","getConnection","normalize","Math","abs","fetchControls","x","y","z","navigator","getGamepads","axes","JOG_CANCEL","String","fromCharCode","JoggerExecutor","state","isStopped","fetchInterval","lastFetch","onOk","message","enabled","fetch","dt","min","getDt","squaredMagnitude","stop","f","sqrt","jogger","maxFeedRate","multiplier","jog","stopIdleFetch","reaction","Date","getTime","startIdleFetch","time","payload","Object","entries","key","toUpperCase","toFixed","join","sendGcode","setInterval","clearInterval","JogSwitch","useEffect","toggle","JoggerSettings","setMaxFeedRate","Knob","sensitivity","PI","toAngle","b","angle","atan","fetchAngles","max","KnobExecutor","lastAngles","lastOk","angles","deltas","toDelta","values","normalizer","reduce","lastAngle","cwDelta","ccwDelta","knob","KnobSwitch","KnobSettings","step","setSensitivity","HorizontalLayout","modes","ControllerModeSelect","useState","keys","mode","setMode","View","disabled","AppDiv","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","addEventListener","id","connected","disconnected","default","setupResizer","parent","postMessage","action","clientHeight","document","body","clientWidth","offsetHeight","offsetWidth","scrollHeight","scrollWidth","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.79b2c1fe.chunk.js","sourcesContent":["const io = require('socket.io-client');\n\nmodule.exports = function(options, callback) {\n\n  const {host, token} = options;\n\n  const url = `ws://${host}?token=${token}`;\n\n  let socket = io.connect(`ws://${host}`, {\n    'query': 'token=' + token\n  });\n\n  socket.on('connect', () => {\n    console.log('Connected to ' + url);\n    callback(null, socket);\n\n    // Open port\n    // socket.emit('open', options.port, {\n    //   baudrate: Number(options.baudrate),\n    //   controllerType: options.controllerType\n    // });\n  });\n\n  socket.on('error', (err) => {\n    console.error('Connection error.');\n    if (socket) {\n      socket.destroy();\n      socket = null;\n    }\n  });\n\n  socket.on('close', () => {\n    console.log('Connection closed.');\n  });\n\n  // socket.on('serialport:open', function(options) {\n  //   options = options || {};\n\n  //   console.log('Connected to port \"' + options.port + '\" (Baud rate: ' + options.baudrate + ')');\n\n  //   callback(null, socket);\n  // });\n\n  socket.on('serialport:error', function(options) {\n    callback(new Error('Error opening serial port \"' + options.port + '\"'));\n  });\n\n  socket.on('serialport:read', function(data) {\n    // console.log((data || '').trim());\n  });\n\n  /*\n  socket.on('serialport:write', function(data) {\n      console.log((data || '').trim());\n  });\n  */\n};\n","\nclass ResizeObserver {\n    callback = null;\n    observer = null;\n\n    constructor(callback) {\n        if (typeof callback === 'function') {\n            this.callback = callback;\n        }\n        return this;\n    }\n    observe(target) {\n        if (this.observer) {\n            this.observer.disconnect();\n            this.observer = null;\n        }\n\n        this.callback && this.callback();\n\n        this.observer = new MutationObserver(mutations => {\n            this.callback && this.callback();\n        });\n\n        this.observer.observe(target, {\n            attributes: true,\n            attributeOldValue: false,\n            characterData: true,\n            characterDataOldValue: false,\n            childList: true,\n            subtree: true\n        });\n    }\n    disconnect() {\n        if (this.observer) {\n            this.observer.disconnect();\n            this.observer = null;\n        }\n    }\n}\n\nexport default ResizeObserver;\n","import {promisify} from 'util'\nimport {Socket} from './socketTypes'\nimport {Port} from './Port'\nimport {makeAutoObservable} from \"mobx\";\nimport params from \"../params/params\";\nimport connectionStatus from \"./connectionStatus\";\nconst setupSocket = require('./socket')\n\nexport class Connection {\n  private readonly socket: Socket\n\n  private port?: string\n\n  constructor(socket: Socket) {\n    this.socket = socket\n    this.port = undefined\n    this.setupListeners()\n    this.setupPort()\n    makeAutoObservable(this)\n  }\n\n  sendGcode(gcode: string) {\n    if(!this.port) {\n      return\n    }\n    this.socket.emit('write', this.port, `${gcode}\\n`)\n  }\n\n  on(callback: (data: any) => void) {\n    this.socket.on('serialport:read', callback);\n  }\n\n  off(callback: (data: any) => void) {\n    this.socket.off('serialport:read', callback);\n  }\n\n  private setupPort() {\n    this.socket.emit('list')\n  }\n\n  private openPort(port: string) {\n    this.socket.emit('open', port)\n  }\n\n  private closePort() {\n    // console.log(`Port '${this.port}' was closed`)\n    this.port = undefined\n    connectionStatus.setPort(undefined)\n  }\n\n  private setupListeners() {\n    this.socket.on('serialport:open', ({port}: Port) => {\n      // console.log(`Connected to controller '${port}'`)\n      this.port = port\n      connectionStatus.setPort(port);\n    })\n\n    this.socket.on('serialport:list', (ports: Port[]) => {\n      const port = ports.find(port => port.inuse)?.port\n      if(!port) {\n        // console.log('There is no port in use. Please use cncjs app to open a connection and I will immediatly connect to that port. If you need to set port manualy please refer to documentation https://github.com/UglyDonkey/cncjs-pendant-gpio#port')\n        return\n      }\n\n      this.openPort(port)\n    })\n    this.socket.on('serialport:change', ({port, inuse}: Port) => {\n      if(port === this.port && !inuse) {\n        this.closePort()\n      } else if(!this.port && inuse) {\n        this.openPort(port)\n      }\n    })\n  }\n}\n\nlet connection: Connection\n\nexport const setupConnection = async () => {\n  const socket = await promisify(setupSocket)(params)\n  connection = new Connection(socket)\n}\n\nexport const getConnection = () => connection\n","import {makeAutoObservable} from \"mobx\";\nimport {Gamepad} from \"./Gamepad\";\n\nexport class GamepadConnection {\n    selected?: Gamepad = undefined;\n    available: Gamepad[] = [];\n    deadzone: number = 0.15;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    connected(gamepad: Gamepad) {\n        const i = this.available.findIndex(a => a.index === gamepad.index);\n        if(i === -1) {\n            this.available.push(gamepad);\n        } else {\n            this.available[i] = gamepad;\n        }\n    }\n\n    disconnected(gamepad: Gamepad) {\n        const i = this.available.findIndex(a => a.index === gamepad.index);\n        if(i !== -1) {\n            this.available.splice(i, 1);\n        }\n        if(this.selected?.index === gamepad.index) {\n            this.selected = undefined;\n        }\n    }\n\n    select(gamepad: Gamepad) {\n        if(this.available.filter(a => a.index === gamepad.index).length === 0) {\n            return;\n        }\n        this.selected = gamepad;\n    }\n\n    get normalize() {\n        return 1 / (1 - this.deadzone);\n    }\n\n    setDeadzone(deadzone: number) {\n        this.deadzone = deadzone;\n    }\n}\n\nconst gamepadConnection = new GamepadConnection();\n\nexport default gamepadConnection;\n","import styled from \"styled-components\";\n\nexport const OneLine = styled.div`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    width: 100%;\n`;\n","import {observer} from \"mobx-react-lite\";\nimport gamepadConnection from \"./GamepadConnection\";\nimport {OneLine} from \"../common/OneLine\";\n\nexport const GamepadStatus = observer (() => (\n    <OneLine>\n        {gamepadConnection.selected\n            ?\n            `using: ${gamepadConnection.selected.name}`\n            :\n            'please select gamepad'\n        }\n    </OneLine>\n));\n","import {observer} from \"mobx-react-lite\";\nimport gamepadConnection from \"./GamepadConnection\";\nimport {Gamepad} from \"./Gamepad\";\nimport {OneLine} from \"../common/OneLine\";\n\nexport const GamepadSelection = observer(() => (\n    <div>\n        {gamepadConnection.available.length === 0 ?\n            'no gamepads detected'\n            :\n            gamepadConnection.available.map(gamepad => <GamepadOption key={gamepad.index} gamepad={gamepad}/>)}\n    </div>\n));\n\nconst GamepadOption = ({gamepad}: {gamepad: Gamepad}) => {\n    const {name} = gamepad;\n\n    return <OneLine as='button' onClick={() => gamepadConnection.select(gamepad)}>{name}</OneLine>\n};\n","import {makeAutoObservable} from \"mobx\";\n\nexport class ConnectionStatus {\n    port?: string;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    setPort(port?: string) {\n        this.port = port;\n    }\n}\n\nconst connectionStatus = new ConnectionStatus();\n\nexport default connectionStatus;\n","import {observer} from \"mobx-react-lite\";\nimport connectionStatus from \"../connectionStatus\";\n\nexport const Connection = observer(() => <div>Port: {connectionStatus.port}</div>);\n","import {observer} from \"mobx-react-lite\";\nimport gamepadConnection from \"./GamepadConnection\";\n\nexport const GamepadSettings = observer(() => (\n    <div>\n        Deadzone:{' '}\n        <input type='number' value={gamepadConnection.deadzone} onChange={e => gamepadConnection.setDeadzone(Number.parseFloat(e.target.value))}/>\n    </div>\n));\n","\nexport interface Params {\n    token: string;\n    host: string;\n}\n\nconst urlParams = new URLSearchParams(window.location.search);\n\nconst params: Params = {\n    token: urlParams.get('token')!,\n    host: urlParams.get('host') || ''\n}\n\nexport default params;\n","import gamepadConnection from \"./GamepadConnection\";\n\nconst fetchControls = () => {\n    const {selected} = gamepadConnection;\n    if(!selected) {\n        return {x: 0, y: 0, z: 0};\n    }\n\n    const gamepad = navigator.getGamepads()[selected.index];\n    if(!gamepad) {\n        return {x: 0, y: 0, z: 0};\n    }\n    const {axes} = gamepad;\n    return {x: deadzone(axes[0]), y: deadzone(-axes[1]), z: deadzone(-axes[3])};\n}\n\nconst deadzone = (value: number) => {\n    const {deadzone, normalize} = gamepadConnection;\n    if(Math.abs(value) < deadzone) return 0;\n    else if(value > 0) return (value - deadzone) * normalize;\n    else return (value + deadzone) * normalize;\n}\n\nexport default fetchControls;\n","import {getConnection} from \"../../connection/connection\";\nimport {reaction} from \"mobx\";\nimport {Jogger} from \"./jogger\";\nimport fetchControls from \"../../gamepad/fetchControls\";\nimport jogger from \"./index\";\ntype Timeout = NodeJS.Timeout;\n\nconst JOG_CANCEL = String.fromCharCode(0x85);\n\nexport class JoggerExecutor {\n    private state: Jogger;\n    private isStopped: boolean = true;\n    private fetchInterval?: Timeout;\n    private lastFetch: number = 0;\n\n    constructor(state: Jogger) {\n        this.state = state;\n        reaction(() => state.enabled, () => state.enabled ? this.on() : this.off());\n    }\n\n    on() {\n        console.log('jogger on')\n        getConnection()?.on(this.onOk);\n        this.lastFetch = new Date().getTime();\n        this.startIdleFetch();\n    }\n\n    off() {\n        console.log('jogger off')\n        this.stop();\n        getConnection()?.off(this.onOk);\n        this.stopIdleFetch();\n    }\n\n    private onOk = (message: string) => {\n        if(message === 'ok' && this.state.enabled) {\n            this.fetch();\n        }\n    }\n\n    private fetch = () => {\n        if(!this.state.enabled) {\n            return;\n        }\n\n        const dt = Math.min(this.getDt(), 15);\n\n        const {x, y, z} = fetchControls();\n        const squaredMagnitude = x * x + y * y + z * z;\n        if(squaredMagnitude === 0) {\n            this.stop();\n        }else{\n            const f = Math.sqrt(squaredMagnitude) * jogger.maxFeedRate;\n            const multiplier = 0.001 * f * dt;\n            console.log({x, f, dt, multiplier})\n            this.jog({\n                x: x * multiplier,\n                y: y * multiplier,\n                z: z * multiplier,\n                f\n            });\n            this.isStopped = false;\n            this.stopIdleFetch();\n        }\n    }\n\n    private getDt() {\n        const time = new Date().getTime();\n        const dt = time - this.lastFetch;\n        this.lastFetch = time;\n        return dt;\n    }\n\n    private jog(params: {[key: string]: number}) {\n        const payload = Object.entries(params)\n            .map(([key, value]) => `${key.toUpperCase()}${value.toFixed(4)}`)\n            .join(' ');\n\n        getConnection()?.sendGcode(`$J=G91 ${payload}`);\n    }\n\n    private stop() {\n        if(this.isStopped) {\n            return;\n        }\n        getConnection()?.sendGcode(JOG_CANCEL);\n        this.isStopped = true;\n        this.startIdleFetch();\n    }\n\n    private startIdleFetch() {\n        if(!this.fetchInterval) {\n            this.fetchInterval = setInterval(this.fetch, 20);\n        }\n    }\n\n    private stopIdleFetch() {\n        if(this.fetchInterval) {\n            clearInterval(this.fetchInterval);\n            this.fetchInterval = undefined;\n        }\n    }\n}\n","import {JoggerExecutor} from \"./joggerExecutor\";\nimport {Jogger} from \"./jogger\";\n\nconst jogger = new Jogger();\nnew JoggerExecutor(jogger);\n\nexport default jogger;\n","import {makeAutoObservable} from \"mobx\";\n\nexport class Jogger {\n    enabled: boolean = false;\n    maxFeedRate: number = 300;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    toggle() {\n        this.enabled = !this.enabled;\n    }\n\n    setMaxFeedRate(maxFeedRate: number) {\n        this.maxFeedRate = maxFeedRate;\n    }\n\n    off() {\n        this.enabled = false;\n    }\n}\n\n\n","import jogger from \"./index\";\nimport {observer} from \"mobx-react-lite\";\nimport {OneLine} from \"../../common/OneLine\";\nimport {useEffect} from \"react\";\n\nexport const JogSwitch = observer(() => {\n    useEffect(() => () => jogger.off(), []);\n\n    return (\n        <OneLine as='button' onClick={() => jogger.toggle()}>\n            {jogger.enabled ? 'jogging enabled' : 'jogging stopped'}\n        </OneLine>\n    );\n});\n","import {observer} from \"mobx-react-lite\";\nimport jogger from \"./index\";\n\nexport const JoggerSettings = observer(() => (\n    <div>\n        Feed Rate:{' '}\n        <input type='number' value={jogger.maxFeedRate} onChange={e => jogger.setMaxFeedRate(Number.parseFloat(e.target.value))}/>\n    </div>\n));\n","import {makeAutoObservable} from \"mobx\";\n\nexport class Knob {\n    enabled: boolean = false;\n    sensitivity: number = 1;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    toggle() {\n        this.enabled = !this.enabled;\n    }\n\n    off() {\n        this.enabled = false;\n    }\n\n    setSensitivity(sensitivity: number) {\n        this.sensitivity = sensitivity;\n    }\n}\n","import gamepadConnection from \"./GamepadConnection\";\n\nconst {PI} = Math;\n\nconst fetchAngles = (): [number | undefined, number | undefined] => {\n    const {selected} = gamepadConnection;\n    if(!selected) {\n        return [undefined, undefined];\n    }\n\n    const gamepad = navigator.getGamepads()[selected.index];\n    if(!gamepad) {\n        return [undefined, undefined];\n    }\n\n    const {axes} = gamepad;\n\n    return [toAngle(axes[0], axes[1]), toAngle(axes[2], axes[3])];\n}\n\nconst toAngle = (a: number, b: number) => {\n    if(a * a + b * b < 0.8) {\n        return undefined;\n    }\n\n    const angle = Math.atan(a / b);\n    if( b > 0 ) {\n        return PI - angle;\n    } else if ( a > 0) {\n        return -angle;\n    } else {\n        return 2*PI - angle\n    }\n}\n\nexport default fetchAngles;\n","import {Knob} from \"./knob\";\nimport {reaction} from \"mobx\";\nimport fetchAngles from \"../../gamepad/fetchAngles\";\nimport {getConnection} from \"../../connection/connection\";\ntype Timeout = NodeJS.Timeout;\nconst {PI, abs, max} = Math;\n\nconst JOG_CANCEL = String.fromCharCode(0x85);\n\nexport class KnobExecutor {\n    private state: Knob;\n    private fetchInterval?: Timeout;\n    private lastAngles: (number | undefined)[] = [undefined, undefined];\n    private isStopped: boolean = true;\n    private lastOk: boolean = true;\n\n    constructor(state: Knob) {\n        this.state = state;\n        reaction(() => state.enabled, () => state.enabled ? this.on() : this.off());\n    }\n\n    private on() {\n        this.startIdleFetch()\n        getConnection()?.on(this.onOk);\n    }\n\n    private off() {\n        this.stopIdleFetch();\n        getConnection()?.off(this.onOk);\n    }\n\n    private onOk = (message: string) => {\n        if(message === 'ok') {\n            this.lastOk = true;\n        }\n    }\n\n    private startIdleFetch() {\n        if(!this.fetchInterval) {\n            this.fetchInterval = setInterval(this.fetch, 100);\n        }\n    }\n\n    private stopIdleFetch() {\n        if(this.fetchInterval) {\n            clearInterval(this.fetchInterval);\n            this.fetchInterval = undefined;\n        }\n    }\n\n    private fetch = () => {\n        const angles = fetchAngles();\n\n        if (this.state.enabled && this.lastOk) {\n            const deltas = angles\n                .map((value, index) => this.toDelta(value, this.lastAngles[index]))\n                .map(value => value && value * this.state.sensitivity);\n\n            if (deltas.find(a => a !== undefined)) {\n                const [x, y] = this.normalize(deltas);\n                this.jog({x, y, f: 9999});\n            } else {\n                this.stop();\n            }\n        }\n\n        this.lastAngles = angles;\n    }\n\n    private normalize(values: (number|undefined)[]) {\n        const normalizer = values.map(a => a || 0).map(abs).reduce((a, b) => max(a, b), 0);\n        if(normalizer < 1) {\n            return values;\n        }\n        return values.map(a => a !== undefined ? a / normalizer : undefined)\n    }\n\n    private jog(params: {[key: string]: (number | undefined)}) {\n        const payload = Object.entries(params)\n            .filter(([, value]) => value !== undefined)\n            .map(([key, value]) => `${key.toUpperCase()}${value!.toFixed(4)}`)\n            .join(' ');\n\n        getConnection()?.sendGcode(`$J=G91 ${payload}`);\n        this.lastOk = false;\n        this.isStopped = false;\n    }\n\n    private toDelta(angle?: number, lastAngle?: number) {\n        if(angle === undefined || lastAngle === undefined) {\n            return undefined\n        }\n\n        const cwDelta = angle - lastAngle;\n        const ccwDelta = (cwDelta > 0 ? -2*PI + cwDelta : 2*PI + cwDelta);\n\n        return abs(cwDelta) < abs(ccwDelta) ? cwDelta : ccwDelta;\n    }\n\n    private stop() {\n        if(this.isStopped) {\n            return;\n        }\n        getConnection()?.sendGcode(JOG_CANCEL);\n        this.isStopped = true;\n    }\n}\n","import {Knob} from \"./knob\";\nimport {KnobExecutor} from \"./knobExecutor\";\n\nconst knob = new Knob();\nnew KnobExecutor(knob);\n\nexport default knob;\n","import {observer} from \"mobx-react-lite\";\nimport {useEffect} from \"react\";\nimport {OneLine} from \"../../common/OneLine\";\nimport knob from \"./index\";\n\nexport const KnobSwitch = observer(() => {\n    useEffect(() => () => knob.off(), []);\n\n    return (\n        <OneLine as='button' onClick={() => knob.toggle()}>\n            {knob.enabled ? 'knob enabled' : 'knob stopped'}\n        </OneLine>\n    );\n});\n","import {observer} from \"mobx-react-lite\";\nimport knob from \"./index\";\n\nexport const KnobSettings = observer(() => (\n    <div>\n        Sensitivity: {' '}\n        <input type=\"number\" step={0.1} min={0.1} value={knob.sensitivity} onChange={e => knob.setSensitivity(Number.parseFloat(e.target.value))} />\n    </div>\n))\n","import styled from \"styled-components\";\n\nexport const HorizontalLayout = styled.div`\n    display: flex\n`\n","import {JoggerView} from \"./jogger/JoggerView\";\nimport {KnobView} from \"./knob/KnobView\";\nimport {HorizontalLayout} from \"../common/HorizontalLayout\";\nimport React, {useState} from \"react\";\n\nconst modes: {[key: string]: React.FC} = {\n    Knob: KnobView,\n    'Jogger (Experimental)': JoggerView,\n}\n\nexport const ControllerModeSelect = () => {\n    const [mode, setMode] = useState(() => Object.keys(modes)[0]);\n    const View = modes[mode];\n\n    return <div>\n        <HorizontalLayout>\n            {Object.keys(modes).map((key) => <button key={key} onClick={() => setMode(key)} disabled={mode === key}>{key}</button>)}\n        </HorizontalLayout>\n        <View />\n    </div>\n}\n","import {KnobSwitch} from \"./KnobSwitch\";\nimport {KnobSettings} from \"./KnobSettings\";\n\nexport const KnobView = () => <div>\n    <KnobSwitch />\n    <KnobSettings />\n</div>\n","import {JogSwitch} from \"./JogSwitch\";\nimport {JoggerSettings} from \"./JoggerSettings\";\nimport React from \"react\";\n\nexport const JoggerView = () => (\n    <div>\n        <JogSwitch />\n        <JoggerSettings />\n    </div>\n)\n","import React from 'react';\nimport {GamepadStatus} from \"./gamepad/GamepadStatus\";\nimport {GamepadSelection} from \"./gamepad/GamepadSelection\";\nimport styled from \"styled-components\";\nimport {Connection} from \"./connection/components/Connection\";\nimport {GamepadSettings} from \"./gamepad/GamepadSettings\";\nimport {ControllerModeSelect} from \"./controllerMode/ControllerModeSelect\";\n\nconst App = () => (\n    <AppDiv>\n        <Connection />\n        <ControllerModeSelect />\n        <GamepadStatus />\n        <GamepadSelection />\n        <GamepadSettings />\n    </AppDiv>\n);\n\nconst AppDiv = styled.div`\n    padding: 10px;\n`\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import gamepadConnection from \"./GamepadConnection\";\n\nconst setupListeners = () => {\n    window.addEventListener(\"gamepadconnected\", e => {\n        const {index, id} = (e as GamepadEvent).gamepad;\n        gamepadConnection.connected({index, name: id});\n    });\n\n    window.addEventListener(\"gamepaddisconnected\", e => {\n        const {index, id} = (e as GamepadEvent).gamepad;\n        gamepadConnection.disconnected({index, name: id});\n    });\n}\n\nexport default setupListeners;\n","import params from \"../params/params\";\n\nconst ResizeObserver = require(\"./ResizeObserver\").default;\n\nconst setupResizer = () => {\n    new ResizeObserver(() => {\n        // Use the postMessage API for inter-frame communication\n        window.parent.postMessage({\n            token: params.token,\n            action: {\n                type: 'resize',\n                payload: {\n                    clientHeight: document.body.clientHeight,\n                    clientWidth: document.body.clientWidth,\n                    offsetHeight: document.body.offsetHeight,\n                    offsetWidth: document.body.offsetWidth,\n                    scrollHeight: document.body.scrollHeight,\n                    scrollWidth: document.body.scrollWidth\n                }\n            }\n        }, '*');\n    }).observe(document.body);\n}\n\nexport default setupResizer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport setupListeners from \"./gamepad/listeners\";\nimport setupResizer from \"./resizer/setup\";\nimport {setupConnection} from \"./connection/connection\";\n\nsetupListeners();\nsetupResizer();\nsetupConnection();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}