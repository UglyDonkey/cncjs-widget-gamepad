{"version":3,"sources":["connection/socket.js","resizer/ResizeObserver.js","connection/connection.ts","gamepad/GamepadConnection.ts","common/OneLine.tsx","gamepad/GamepadStatus.tsx","gamepad/GamepadSelection.tsx","connection/connectionStatus.ts","connection/components/Connection.tsx","params/params.ts","gamepad/fetchControls.ts","jogger/joggerExecutor.ts","jogger/index.ts","jogger/jogger.ts","jogger/JogSwitch.tsx","App.tsx","reportWebVitals.ts","gamepad/listeners.ts","resizer/setup.ts","index.tsx"],"names":["io","require","module","exports","options","callback","host","token","url","socket","connect","on","console","log","err","error","destroy","Error","port","data","ResizeObserver","observer","this","target","disconnect","MutationObserver","mutations","observe","attributes","attributeOldValue","characterData","characterDataOldValue","childList","subtree","connection","gamepadConnection","selected","undefined","available","makeAutoObservable","gamepad","i","findIndex","a","index","push","splice","filter","length","OneLine","styled","div","GamepadStatus","name","GamepadSelection","map","GamepadOption","as","onClick","select","connectionStatus","Connection","urlParams","URLSearchParams","window","location","search","params","get","setupSocket","setupListeners","setupPort","gcode","emit","off","setPort","ports","find","inuse","openPort","closePort","setupConnection","promisify","getConnection","deadzone","value","Math","abs","fetchControls","x","y","z","navigator","getGamepads","axes","JOG_CANCEL","String","fromCharCode","JoggerExecutor","state","isStopped","fetchInterval","onOk","message","enabled","fetch","squaredMagnitude","stop","sendGcode","sqrt","stopIdleFetch","reaction","startIdleFetch","setInterval","clearInterval","jogger","JogSwitch","toggle","AppDiv","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","addEventListener","e","id","connected","disconnected","default","setupResizer","parent","postMessage","action","type","payload","clientHeight","document","body","clientWidth","offsetHeight","offsetWidth","scrollHeight","scrollWidth","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9e3ba710.chunk.js","sourcesContent":["const io = require('socket.io-client');\n\nmodule.exports = function(options, callback) {\n\n  const {host, token} = options;\n\n  const url = `ws://${host}?token=${token}`;\n\n  let socket = io.connect(`ws://${host}`, {\n    'query': 'token=' + token\n  });\n\n  socket.on('connect', () => {\n    console.log('Connected to ' + url);\n    callback(null, socket);\n\n    // Open port\n    // socket.emit('open', options.port, {\n    //   baudrate: Number(options.baudrate),\n    //   controllerType: options.controllerType\n    // });\n  });\n\n  socket.on('error', (err) => {\n    console.error('Connection error.');\n    if (socket) {\n      socket.destroy();\n      socket = null;\n    }\n  });\n\n  socket.on('close', () => {\n    console.log('Connection closed.');\n  });\n\n  // socket.on('serialport:open', function(options) {\n  //   options = options || {};\n\n  //   console.log('Connected to port \"' + options.port + '\" (Baud rate: ' + options.baudrate + ')');\n\n  //   callback(null, socket);\n  // });\n\n  socket.on('serialport:error', function(options) {\n    callback(new Error('Error opening serial port \"' + options.port + '\"'));\n  });\n\n  socket.on('serialport:read', function(data) {\n    // console.log((data || '').trim());\n  });\n\n  /*\n  socket.on('serialport:write', function(data) {\n      console.log((data || '').trim());\n  });\n  */\n};\n","\nclass ResizeObserver {\n    callback = null;\n    observer = null;\n\n    constructor(callback) {\n        if (typeof callback === 'function') {\n            this.callback = callback;\n        }\n        return this;\n    }\n    observe(target) {\n        if (this.observer) {\n            this.observer.disconnect();\n            this.observer = null;\n        }\n\n        this.callback && this.callback();\n\n        this.observer = new MutationObserver(mutations => {\n            this.callback && this.callback();\n        });\n\n        this.observer.observe(target, {\n            attributes: true,\n            attributeOldValue: false,\n            characterData: true,\n            characterDataOldValue: false,\n            childList: true,\n            subtree: true\n        });\n    }\n    disconnect() {\n        if (this.observer) {\n            this.observer.disconnect();\n            this.observer = null;\n        }\n    }\n}\n\nexport default ResizeObserver;\n","import {promisify} from 'util'\nimport {Socket} from './socketTypes'\nimport {Port} from './Port'\nimport {makeAutoObservable} from \"mobx\";\nimport params from \"../params/params\";\nimport connectionStatus from \"./connectionStatus\";\nconst setupSocket = require('./socket')\n\nexport class Connection {\n  private readonly socket: Socket\n\n  private port?: string\n\n  constructor(socket: Socket) {\n    this.socket = socket\n    this.port = undefined\n    this.setupListeners()\n    this.setupPort()\n    makeAutoObservable(this)\n  }\n\n  sendGcode(gcode: string) {\n    if(!this.port) {\n      return\n    }\n    this.socket.emit('write', this.port, `${gcode}\\n`)\n  }\n\n  on(callback: (data: any) => void) {\n    this.socket.on('serialport:read', callback);\n  }\n\n  off(callback: (data: any) => void) {\n    this.socket.off('serialport:read', callback);\n  }\n\n  private setupPort() {\n    this.socket.emit('list')\n  }\n\n  private openPort(port: string) {\n    this.socket.emit('open', port)\n  }\n\n  private closePort() {\n    // console.log(`Port '${this.port}' was closed`)\n    this.port = undefined\n    connectionStatus.setPort(undefined)\n  }\n\n  private setupListeners() {\n    this.socket.on('serialport:open', ({port}: Port) => {\n      // console.log(`Connected to controller '${port}'`)\n      this.port = port\n      connectionStatus.setPort(port);\n    })\n\n    this.socket.on('serialport:list', (ports: Port[]) => {\n      const port = ports.find(port => port.inuse)?.port\n      if(!port) {\n        // console.log('There is no port in use. Please use cncjs app to open a connection and I will immediatly connect to that port. If you need to set port manualy please refer to documentation https://github.com/UglyDonkey/cncjs-pendant-gpio#port')\n        return\n      }\n\n      this.openPort(port)\n    })\n    this.socket.on('serialport:change', ({port, inuse}: Port) => {\n      if(port === this.port && !inuse) {\n        this.closePort()\n      } else if(!this.port && inuse) {\n        this.openPort(port)\n      }\n    })\n  }\n}\n\nlet connection: Connection\n\nexport const setupConnection = async () => {\n  const socket = await promisify(setupSocket)(params)\n  connection = new Connection(socket)\n}\n\nexport const getConnection = () => connection\n","import {makeAutoObservable} from \"mobx\";\nimport {Gamepad} from \"./Gamepad\";\n\nexport class GamepadConnection {\n    selected?: Gamepad = undefined;\n    available: Gamepad[] = [];\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    connected(gamepad: Gamepad) {\n        const i = this.available.findIndex(a => a.index === gamepad.index);\n        if(i === -1) {\n            this.available.push(gamepad);\n        } else {\n            this.available[i] = gamepad;\n        }\n    }\n\n    disconnected(gamepad: Gamepad) {\n        const i = this.available.findIndex(a => a.index === gamepad.index);\n        if(i !== -1) {\n            this.available.splice(i, 1);\n        }\n        if(this.selected?.index === gamepad.index) {\n            this.selected = undefined;\n        }\n    }\n\n    select(gamepad: Gamepad) {\n        if(this.available.filter(a => a.index === gamepad.index).length === 0) {\n            return;\n        }\n        this.selected = gamepad;\n    }\n}\n\nconst gamepadConnection = new GamepadConnection();\n\nexport default gamepadConnection;\n","import styled from \"styled-components\";\n\nexport const OneLine = styled.div`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    width: 100%;\n`;\n","import {observer} from \"mobx-react-lite\";\nimport gamepadConnection from \"./GamepadConnection\";\nimport {OneLine} from \"../common/OneLine\";\n\nexport const GamepadStatus = observer (() => (\n    <OneLine>\n        {gamepadConnection.selected\n            ?\n            `using: ${gamepadConnection.selected.name}`\n            :\n            'please select controller'\n        }\n    </OneLine>\n));\n","import {observer} from \"mobx-react-lite\";\nimport gamepadConnection from \"./GamepadConnection\";\nimport {Gamepad} from \"./Gamepad\";\nimport {OneLine} from \"../common/OneLine\";\n\nexport const GamepadSelection = observer(() => (\n    <div>\n        {gamepadConnection.available.map(gamepad => <GamepadOption key={gamepad.index} gamepad={gamepad}/>)}\n    </div>\n));\n\nconst GamepadOption = ({gamepad}: {gamepad: Gamepad}) => {\n    const {name} = gamepad;\n\n    return <OneLine as='button' onClick={() => gamepadConnection.select(gamepad)}>{name}</OneLine>\n};\n","import {makeAutoObservable} from \"mobx\";\n\nexport class ConnectionStatus {\n    port?: string;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    setPort(port?: string) {\n        this.port = port;\n    }\n}\n\nconst connectionStatus = new ConnectionStatus();\n\nexport default connectionStatus;\n","import {observer} from \"mobx-react-lite\";\nimport connectionStatus from \"../connectionStatus\";\n\nexport const Connection = observer(() => <div>Port: {connectionStatus.port}</div>);\n","\nexport interface Params {\n    token: string;\n    host: string;\n}\n\nconst urlParams = new URLSearchParams(window.location.search);\n\nconst params: Params = {\n    token: urlParams.get('token')!,\n    host: urlParams.get('host') || ''\n}\n\nexport default params;\n","import gamepadConnection from \"./GamepadConnection\";\n\nconst fetchControls = () => {\n    const {selected} = gamepadConnection;\n    if(!selected) {\n        return {x: 0, y: 0, z: 0};\n    }\n\n    const gamepad = navigator.getGamepads()[selected.index];\n    if(!gamepad) {\n        return {x: 0, y: 0, z: 0};\n    }\n    const {axes} = gamepad;\n    return {x: deadzone(axes[0]), y: deadzone(axes[1]), z: deadzone(axes[3])};\n}\n\nconst deadzone = (value: number) => {\n    if(Math.abs(value) < 0.15) return 0;\n    else if(value > 0) return value - 0.15;\n    else return value + 0.15;\n}\n\nexport default fetchControls;\n","import {getConnection} from \"../connection/connection\";\nimport {reaction} from \"mobx\";\nimport {Jogger} from \"./jogger\";\nimport fetchControls from \"../gamepad/fetchControls\";\ntype Timeout = NodeJS.Timeout;\n\nconst JOG_CANCEL = String.fromCharCode(0x85);\n\nexport class JoggerExecutor {\n    private state: Jogger;\n    private isStopped: boolean = true;\n    private fetchInterval?: Timeout;\n\n    constructor(state: Jogger) {\n        this.state = state;\n        reaction(() => state.enabled, () => state.enabled ? this.on() : this.off());\n    }\n\n    on() {\n        console.log('jogger on')\n        getConnection()?.on(this.onOk);\n        this.startIdleFetch();\n    }\n\n    off() {\n        console.log('jogger off')\n        this.stop();\n        getConnection()?.off(this.onOk);\n        this.stopIdleFetch();\n    }\n\n    private onOk = (message: string) => {\n        if(message === 'ok' && this.state.enabled) {\n            this.fetch();\n        }\n    }\n\n    private fetch = () => {\n        if(!this.state.enabled) {\n            return;\n        }\n\n        const {x, y, z} = fetchControls();\n        const squaredMagnitude = x * x + y * y + z * z;\n        if(squaredMagnitude === 0) {\n            this.stop();\n        }else{\n            getConnection()?.sendGcode(`$J=G91 X${x} Y${y} Z${z} F${Math.sqrt(squaredMagnitude) * 1000}`);\n            this.isStopped = false;\n            this.stopIdleFetch();\n        }\n    }\n\n    private stop() {\n        if(this.isStopped) {\n            return;\n        }\n        getConnection()?.sendGcode(JOG_CANCEL);\n        this.isStopped = true;\n        this.startIdleFetch();\n    }\n\n    private startIdleFetch() {\n        if(!this.fetchInterval) {\n            this.fetchInterval = setInterval(this.fetch, 20);\n        }\n    }\n\n    private stopIdleFetch() {\n        if(this.fetchInterval) {\n            clearInterval(this.fetchInterval);\n            this.fetchInterval = undefined;\n        }\n    }\n}\n","import {JoggerExecutor} from \"./joggerExecutor\";\nimport {Jogger} from \"./jogger\";\n\nconst jogger = new Jogger();\nnew JoggerExecutor(jogger);\n\nexport default jogger;\n","import {makeAutoObservable} from \"mobx\";\n\nexport class Jogger {\n    enabled: boolean = false;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    toggle() {\n        this.enabled = !this.enabled;\n    }\n}\n\n\n","import jogger from \"./\";\nimport {observer} from \"mobx-react-lite\";\nimport {OneLine} from \"../common/OneLine\";\n\nexport const JogSwitch = observer(() => (\n    <OneLine as='button' onClick={() => jogger.toggle()}>\n        {jogger.enabled ? 'jogging enabled' : 'jogging stopped'}\n    </OneLine>\n));\n","import React from 'react';\nimport {GamepadStatus} from \"./gamepad/GamepadStatus\";\nimport {GamepadSelection} from \"./gamepad/GamepadSelection\";\nimport styled from \"styled-components\";\nimport {Connection} from \"./connection/components/Connection\";\nimport {JogSwitch} from \"./jogger/JogSwitch\";\n\nconst App = () => (\n    <AppDiv>\n        <Connection />\n        <JogSwitch />\n        <GamepadStatus/>\n        <GamepadSelection/>\n    </AppDiv>\n);\n\nconst AppDiv = styled.div`\n    padding: 10px;\n`\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import gamepadConnection from \"./GamepadConnection\";\n\nconst setupListeners = () => {\n    window.addEventListener(\"gamepadconnected\", e => {\n        const {index, id} = (e as GamepadEvent).gamepad;\n        gamepadConnection.connected({index, name: id});\n    });\n\n    window.addEventListener(\"gamepaddisconnected\", e => {\n        const {index, id} = (e as GamepadEvent).gamepad;\n        gamepadConnection.disconnected({index, name: id});\n    });\n}\n\nexport default setupListeners;\n","import params from \"../params/params\";\n\nconst ResizeObserver = require(\"./ResizeObserver\").default;\n\nconst setupResizer = () => {\n    new ResizeObserver(() => {\n        // Use the postMessage API for inter-frame communication\n        window.parent.postMessage({\n            token: params.token,\n            action: {\n                type: 'resize',\n                payload: {\n                    clientHeight: document.body.clientHeight,\n                    clientWidth: document.body.clientWidth,\n                    offsetHeight: document.body.offsetHeight,\n                    offsetWidth: document.body.offsetWidth,\n                    scrollHeight: document.body.scrollHeight,\n                    scrollWidth: document.body.scrollWidth\n                }\n            }\n        }, '*');\n    }).observe(document.body);\n}\n\nexport default setupResizer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport setupListeners from \"./gamepad/listeners\";\nimport setupResizer from \"./resizer/setup\";\nimport {setupConnection} from \"./connection/connection\";\n\nsetupListeners();\nsetupResizer();\nsetupConnection();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}