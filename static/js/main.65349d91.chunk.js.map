{"version":3,"sources":["connection/socket.js","resizer/ResizeObserver.js","connection/connection.ts","gamepad/GamepadConnection.ts","common/OneLine.tsx","gamepad/GamepadStatus.tsx","gamepad/GamepadSelection.tsx","connection/connectionStatus.ts","connection/components/Connection.tsx","params/params.ts","gamepad/fetchControls.ts","jogger/joggerExecutor.ts","jogger/index.ts","jogger/jogger.ts","jogger/JogSwitch.tsx","jogger/JoggerSettings.tsx","gamepad/GamepadSettings.tsx","App.tsx","reportWebVitals.ts","gamepad/listeners.ts","resizer/setup.ts","index.tsx"],"names":["io","require","module","exports","options","callback","host","token","url","socket","connect","on","console","log","err","error","destroy","Error","port","data","ResizeObserver","observer","this","target","disconnect","MutationObserver","mutations","observe","attributes","attributeOldValue","characterData","characterDataOldValue","childList","subtree","connection","gamepadConnection","selected","undefined","available","deadzone","makeAutoObservable","gamepad","i","findIndex","a","index","push","splice","filter","length","OneLine","styled","div","GamepadStatus","name","GamepadSelection","map","GamepadOption","as","onClick","select","connectionStatus","Connection","urlParams","URLSearchParams","window","location","search","params","get","setupSocket","setupListeners","setupPort","gcode","emit","off","setPort","ports","find","inuse","openPort","closePort","setupConnection","promisify","getConnection","value","normalize","Math","abs","fetchControls","x","y","z","navigator","getGamepads","axes","JOG_CANCEL","String","fromCharCode","JoggerExecutor","state","isStopped","fetchInterval","lastFetch","onOk","message","enabled","fetch","dt","min","getDt","squaredMagnitude","stop","f","sqrt","jogger","maxFeedRate","multiplier","jog","stopIdleFetch","reaction","Date","getTime","startIdleFetch","time","payload","Object","entries","key","toUpperCase","toFixed","join","sendGcode","setInterval","clearInterval","JogSwitch","toggle","JoggerSettings","type","onChange","e","setMaxFeedRate","Number","parseFloat","GamepadSettings","setDeadzone","AppDiv","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","addEventListener","id","connected","disconnected","default","setupResizer","parent","postMessage","action","clientHeight","document","body","clientWidth","offsetHeight","offsetWidth","scrollHeight","scrollWidth","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.65349d91.chunk.js","sourcesContent":["const io = require('socket.io-client');\n\nmodule.exports = function(options, callback) {\n\n  const {host, token} = options;\n\n  const url = `ws://${host}?token=${token}`;\n\n  let socket = io.connect(`ws://${host}`, {\n    'query': 'token=' + token\n  });\n\n  socket.on('connect', () => {\n    console.log('Connected to ' + url);\n    callback(null, socket);\n\n    // Open port\n    // socket.emit('open', options.port, {\n    //   baudrate: Number(options.baudrate),\n    //   controllerType: options.controllerType\n    // });\n  });\n\n  socket.on('error', (err) => {\n    console.error('Connection error.');\n    if (socket) {\n      socket.destroy();\n      socket = null;\n    }\n  });\n\n  socket.on('close', () => {\n    console.log('Connection closed.');\n  });\n\n  // socket.on('serialport:open', function(options) {\n  //   options = options || {};\n\n  //   console.log('Connected to port \"' + options.port + '\" (Baud rate: ' + options.baudrate + ')');\n\n  //   callback(null, socket);\n  // });\n\n  socket.on('serialport:error', function(options) {\n    callback(new Error('Error opening serial port \"' + options.port + '\"'));\n  });\n\n  socket.on('serialport:read', function(data) {\n    // console.log((data || '').trim());\n  });\n\n  /*\n  socket.on('serialport:write', function(data) {\n      console.log((data || '').trim());\n  });\n  */\n};\n","\nclass ResizeObserver {\n    callback = null;\n    observer = null;\n\n    constructor(callback) {\n        if (typeof callback === 'function') {\n            this.callback = callback;\n        }\n        return this;\n    }\n    observe(target) {\n        if (this.observer) {\n            this.observer.disconnect();\n            this.observer = null;\n        }\n\n        this.callback && this.callback();\n\n        this.observer = new MutationObserver(mutations => {\n            this.callback && this.callback();\n        });\n\n        this.observer.observe(target, {\n            attributes: true,\n            attributeOldValue: false,\n            characterData: true,\n            characterDataOldValue: false,\n            childList: true,\n            subtree: true\n        });\n    }\n    disconnect() {\n        if (this.observer) {\n            this.observer.disconnect();\n            this.observer = null;\n        }\n    }\n}\n\nexport default ResizeObserver;\n","import {promisify} from 'util'\nimport {Socket} from './socketTypes'\nimport {Port} from './Port'\nimport {makeAutoObservable} from \"mobx\";\nimport params from \"../params/params\";\nimport connectionStatus from \"./connectionStatus\";\nconst setupSocket = require('./socket')\n\nexport class Connection {\n  private readonly socket: Socket\n\n  private port?: string\n\n  constructor(socket: Socket) {\n    this.socket = socket\n    this.port = undefined\n    this.setupListeners()\n    this.setupPort()\n    makeAutoObservable(this)\n  }\n\n  sendGcode(gcode: string) {\n    if(!this.port) {\n      return\n    }\n    this.socket.emit('write', this.port, `${gcode}\\n`)\n  }\n\n  on(callback: (data: any) => void) {\n    this.socket.on('serialport:read', callback);\n  }\n\n  off(callback: (data: any) => void) {\n    this.socket.off('serialport:read', callback);\n  }\n\n  private setupPort() {\n    this.socket.emit('list')\n  }\n\n  private openPort(port: string) {\n    this.socket.emit('open', port)\n  }\n\n  private closePort() {\n    // console.log(`Port '${this.port}' was closed`)\n    this.port = undefined\n    connectionStatus.setPort(undefined)\n  }\n\n  private setupListeners() {\n    this.socket.on('serialport:open', ({port}: Port) => {\n      // console.log(`Connected to controller '${port}'`)\n      this.port = port\n      connectionStatus.setPort(port);\n    })\n\n    this.socket.on('serialport:list', (ports: Port[]) => {\n      const port = ports.find(port => port.inuse)?.port\n      if(!port) {\n        // console.log('There is no port in use. Please use cncjs app to open a connection and I will immediatly connect to that port. If you need to set port manualy please refer to documentation https://github.com/UglyDonkey/cncjs-pendant-gpio#port')\n        return\n      }\n\n      this.openPort(port)\n    })\n    this.socket.on('serialport:change', ({port, inuse}: Port) => {\n      if(port === this.port && !inuse) {\n        this.closePort()\n      } else if(!this.port && inuse) {\n        this.openPort(port)\n      }\n    })\n  }\n}\n\nlet connection: Connection\n\nexport const setupConnection = async () => {\n  const socket = await promisify(setupSocket)(params)\n  connection = new Connection(socket)\n}\n\nexport const getConnection = () => connection\n","import {makeAutoObservable} from \"mobx\";\nimport {Gamepad} from \"./Gamepad\";\n\nexport class GamepadConnection {\n    selected?: Gamepad = undefined;\n    available: Gamepad[] = [];\n    deadzone: number = 0.15;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    connected(gamepad: Gamepad) {\n        const i = this.available.findIndex(a => a.index === gamepad.index);\n        if(i === -1) {\n            this.available.push(gamepad);\n        } else {\n            this.available[i] = gamepad;\n        }\n    }\n\n    disconnected(gamepad: Gamepad) {\n        const i = this.available.findIndex(a => a.index === gamepad.index);\n        if(i !== -1) {\n            this.available.splice(i, 1);\n        }\n        if(this.selected?.index === gamepad.index) {\n            this.selected = undefined;\n        }\n    }\n\n    select(gamepad: Gamepad) {\n        if(this.available.filter(a => a.index === gamepad.index).length === 0) {\n            return;\n        }\n        this.selected = gamepad;\n    }\n\n    get normalize() {\n        return 1 / (1 - this.deadzone);\n    }\n\n    setDeadzone(deadzone: number) {\n        this.deadzone = deadzone;\n    }\n}\n\nconst gamepadConnection = new GamepadConnection();\n\nexport default gamepadConnection;\n","import styled from \"styled-components\";\n\nexport const OneLine = styled.div`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    width: 100%;\n`;\n","import {observer} from \"mobx-react-lite\";\nimport gamepadConnection from \"./GamepadConnection\";\nimport {OneLine} from \"../common/OneLine\";\n\nexport const GamepadStatus = observer (() => (\n    <OneLine>\n        {gamepadConnection.selected\n            ?\n            `using: ${gamepadConnection.selected.name}`\n            :\n            'please select gamepad'\n        }\n    </OneLine>\n));\n","import {observer} from \"mobx-react-lite\";\nimport gamepadConnection from \"./GamepadConnection\";\nimport {Gamepad} from \"./Gamepad\";\nimport {OneLine} from \"../common/OneLine\";\n\nexport const GamepadSelection = observer(() => (\n    <div>\n        {gamepadConnection.available.length === 0 ?\n            'no gamepads detected'\n            :\n            gamepadConnection.available.map(gamepad => <GamepadOption key={gamepad.index} gamepad={gamepad}/>)}\n    </div>\n));\n\nconst GamepadOption = ({gamepad}: {gamepad: Gamepad}) => {\n    const {name} = gamepad;\n\n    return <OneLine as='button' onClick={() => gamepadConnection.select(gamepad)}>{name}</OneLine>\n};\n","import {makeAutoObservable} from \"mobx\";\n\nexport class ConnectionStatus {\n    port?: string;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    setPort(port?: string) {\n        this.port = port;\n    }\n}\n\nconst connectionStatus = new ConnectionStatus();\n\nexport default connectionStatus;\n","import {observer} from \"mobx-react-lite\";\nimport connectionStatus from \"../connectionStatus\";\n\nexport const Connection = observer(() => <div>Port: {connectionStatus.port}</div>);\n","\nexport interface Params {\n    token: string;\n    host: string;\n}\n\nconst urlParams = new URLSearchParams(window.location.search);\n\nconst params: Params = {\n    token: urlParams.get('token')!,\n    host: urlParams.get('host') || ''\n}\n\nexport default params;\n","import gamepadConnection from \"./GamepadConnection\";\n\nconst fetchControls = () => {\n    const {selected} = gamepadConnection;\n    if(!selected) {\n        return {x: 0, y: 0, z: 0};\n    }\n\n    const gamepad = navigator.getGamepads()[selected.index];\n    if(!gamepad) {\n        return {x: 0, y: 0, z: 0};\n    }\n    const {axes} = gamepad;\n    return {x: deadzone(axes[0]), y: deadzone(-axes[1]), z: deadzone(-axes[3])};\n}\n\nconst deadzone = (value: number) => {\n    const {deadzone, normalize} = gamepadConnection;\n    if(Math.abs(value) < deadzone) return 0;\n    else if(value > 0) return (value - deadzone) * normalize;\n    else return (value + deadzone) * normalize;\n}\n\nexport default fetchControls;\n","import {getConnection} from \"../connection/connection\";\nimport {reaction} from \"mobx\";\nimport {Jogger} from \"./jogger\";\nimport fetchControls from \"../gamepad/fetchControls\";\nimport jogger from \"./index\";\ntype Timeout = NodeJS.Timeout;\n\nconst JOG_CANCEL = String.fromCharCode(0x85);\n\nexport class JoggerExecutor {\n    private state: Jogger;\n    private isStopped: boolean = true;\n    private fetchInterval?: Timeout;\n    private lastFetch: number = 0;\n\n    constructor(state: Jogger) {\n        this.state = state;\n        reaction(() => state.enabled, () => state.enabled ? this.on() : this.off());\n    }\n\n    on() {\n        console.log('jogger on')\n        getConnection()?.on(this.onOk);\n        this.lastFetch = new Date().getTime();\n        this.startIdleFetch();\n    }\n\n    off() {\n        console.log('jogger off')\n        this.stop();\n        getConnection()?.off(this.onOk);\n        this.stopIdleFetch();\n    }\n\n    private onOk = (message: string) => {\n        if(message === 'ok' && this.state.enabled) {\n            this.fetch();\n        }\n    }\n\n    private fetch = () => {\n        if(!this.state.enabled) {\n            return;\n        }\n\n        const dt = Math.min(this.getDt(), 15);\n\n        const {x, y, z} = fetchControls();\n        const squaredMagnitude = x * x + y * y + z * z;\n        if(squaredMagnitude === 0) {\n            this.stop();\n        }else{\n            const f = Math.sqrt(squaredMagnitude) * jogger.maxFeedRate;\n            const multiplier = 0.001 * f * dt;\n            console.log({x, f, dt, multiplier})\n            this.jog({\n                x: x * multiplier,\n                y: y * multiplier,\n                z: z * multiplier,\n                f\n            });\n            this.isStopped = false;\n            this.stopIdleFetch();\n        }\n    }\n\n    private getDt() {\n        const time = new Date().getTime();\n        const dt = time - this.lastFetch;\n        this.lastFetch = time;\n        return dt;\n    }\n\n    private jog(params: {[key: string]: number}) {\n        const payload = Object.entries(params)\n            .map(([key, value]) => `${key.toUpperCase()}${value.toFixed(4)}`)\n            .join(' ');\n\n        getConnection()?.sendGcode(`$J=G91 ${payload}`);\n    }\n\n    private stop() {\n        if(this.isStopped) {\n            return;\n        }\n        getConnection()?.sendGcode(JOG_CANCEL);\n        this.isStopped = true;\n        this.startIdleFetch();\n    }\n\n    private startIdleFetch() {\n        if(!this.fetchInterval) {\n            this.fetchInterval = setInterval(this.fetch, 20);\n        }\n    }\n\n    private stopIdleFetch() {\n        if(this.fetchInterval) {\n            clearInterval(this.fetchInterval);\n            this.fetchInterval = undefined;\n        }\n    }\n}\n","import {JoggerExecutor} from \"./joggerExecutor\";\nimport {Jogger} from \"./jogger\";\n\nconst jogger = new Jogger();\nnew JoggerExecutor(jogger);\n\nexport default jogger;\n","import {makeAutoObservable} from \"mobx\";\n\nexport class Jogger {\n    enabled: boolean = false;\n    maxFeedRate: number = 300;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    toggle() {\n        this.enabled = !this.enabled;\n    }\n\n    setMaxFeedRate(maxFeedRate: number) {\n        this.maxFeedRate = maxFeedRate;\n    }\n}\n\n\n","import jogger from \"./\";\nimport {observer} from \"mobx-react-lite\";\nimport {OneLine} from \"../common/OneLine\";\n\nexport const JogSwitch = observer(() => (\n    <OneLine as='button' onClick={() => jogger.toggle()}>\n        {jogger.enabled ? 'jogging enabled' : 'jogging stopped'}\n    </OneLine>\n));\n","import {observer} from \"mobx-react-lite\";\nimport jogger from \"./index\";\n\nexport const JoggerSettings = observer(() => (\n    <div>\n        Feed Rate:{' '}\n        <input type='number' value={jogger.maxFeedRate} onChange={e => jogger.setMaxFeedRate(Number.parseFloat(e.target.value))}/>\n    </div>\n));\n","import {observer} from \"mobx-react-lite\";\nimport gamepadConnection from \"./GamepadConnection\";\n\nexport const GamepadSettings = observer(() => (\n    <div>\n        Deadzone:{' '}\n        <input type='number' value={gamepadConnection.deadzone} onChange={e => gamepadConnection.setDeadzone(Number.parseFloat(e.target.value))}/>\n    </div>\n));\n","import React from 'react';\nimport {GamepadStatus} from \"./gamepad/GamepadStatus\";\nimport {GamepadSelection} from \"./gamepad/GamepadSelection\";\nimport styled from \"styled-components\";\nimport {Connection} from \"./connection/components/Connection\";\nimport {JogSwitch} from \"./jogger/JogSwitch\";\nimport {JoggerSettings} from \"./jogger/JoggerSettings\";\nimport {GamepadSettings} from \"./gamepad/GamepadSettings\";\n\nconst App = () => (\n    <AppDiv>\n        <Connection />\n        <JogSwitch />\n        <JoggerSettings />\n        <GamepadStatus />\n        <GamepadSelection />\n        <GamepadSettings />\n    </AppDiv>\n);\n\nconst AppDiv = styled.div`\n    padding: 10px;\n`\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import gamepadConnection from \"./GamepadConnection\";\n\nconst setupListeners = () => {\n    window.addEventListener(\"gamepadconnected\", e => {\n        const {index, id} = (e as GamepadEvent).gamepad;\n        gamepadConnection.connected({index, name: id});\n    });\n\n    window.addEventListener(\"gamepaddisconnected\", e => {\n        const {index, id} = (e as GamepadEvent).gamepad;\n        gamepadConnection.disconnected({index, name: id});\n    });\n}\n\nexport default setupListeners;\n","import params from \"../params/params\";\n\nconst ResizeObserver = require(\"./ResizeObserver\").default;\n\nconst setupResizer = () => {\n    new ResizeObserver(() => {\n        // Use the postMessage API for inter-frame communication\n        window.parent.postMessage({\n            token: params.token,\n            action: {\n                type: 'resize',\n                payload: {\n                    clientHeight: document.body.clientHeight,\n                    clientWidth: document.body.clientWidth,\n                    offsetHeight: document.body.offsetHeight,\n                    offsetWidth: document.body.offsetWidth,\n                    scrollHeight: document.body.scrollHeight,\n                    scrollWidth: document.body.scrollWidth\n                }\n            }\n        }, '*');\n    }).observe(document.body);\n}\n\nexport default setupResizer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport setupListeners from \"./gamepad/listeners\";\nimport setupResizer from \"./resizer/setup\";\nimport {setupConnection} from \"./connection/connection\";\n\nsetupListeners();\nsetupResizer();\nsetupConnection();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}